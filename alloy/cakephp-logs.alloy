// ##ddev-generated

/**
 * This file contains the pipeline for CakePHP logs.
 * We map the CakePHP path in a docker-compose file, then use "local.file_match" to read them.
 *
 * 'local.file_match' discovers files on the local filesystem using glob patterns and the doublestar library.
 * @See https://grafana.com/docs/alloy/latest/reference/components/local/local.file_match/
 */
local.file_match "cakephp_logs" {
  path_targets = [{
    "__path__" = "/var/log/cakephp/**/*.log",
    "service_name" = "cakephp_logs",
  }]
  sync_period = "10s"
}

/**
 * 'loki.source.file' reads log entries from files and forwards them to other loki.* components.
 * @See https://grafana.com/docs/alloy/latest/reference/components/loki/loki.source.file/
 */
loki.source.file "cakephp_logs" {
  targets = local.file_match.cakephp_logs.targets
  forward_to = [loki.process.cakephp_multiline_log.receiver]
}

/**
 * Parses multiline CakePHP logs.
 * CakePHP log entries typically start with a timestamp like: [2024-05-19 14:22:31]
 * @See https://grafana.com/docs/alloy/latest/reference/components/loki/loki.process/
 */
loki.process "cakephp_multiline_log" {
  // https://grafana.com/docs/alloy/latest/reference/components/loki/loki.process/#stagemultiline
  stage.multiline {
    firstline = "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}"
    max_wait_time   = "3s"
  }

  // Explicitly extract timestamp from the line
  stage.regex {
    expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
  }

  stage.labels {
    values = {
      timestamp = "timestamp",
    }
  }


  forward_to = [loki.write.default.receiver]
}
